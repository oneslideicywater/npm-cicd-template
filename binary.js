// this example uses the binary generated by the rust project in the parent directory
// said project is released on GitHub, and the correct URL is constructed based on
// the target operating system and the version in package.json

// your binary could be downloaded from any URL and could use any logic you want
// to construct said URL. You could even A/B test two different binary distribution
// solutions!

const { Binary } = require("binary-install");
const os = require("os");
const cTable = require("console.table");

const error = msg => {
  console.error(msg);
  process.exit(1);
};

const { version, name, repository } = require("./package.json");

const supportedPlatforms = [
  {
    TYPE: "Windows_NT",
    ARCHITECTURE: "x64",
    RUST_TARGET: "x86_64-pc-windows-msvc",
    BINARY_NAME: "cicd-template"
  },
  {
    TYPE: "Linux",
    ARCHITECTURE: "x64",
    RUST_TARGET: "x86_64-unknown-linux-musl",
    BINARY_NAME: "cicd-template"
  },

];

const getPlatformMetadata = () => {
  const type = os.type();
  const architecture = os.arch();

  for (let supportedPlatform of supportedPlatforms) {
    if (
      type === supportedPlatform.TYPE &&
      architecture === supportedPlatform.ARCHITECTURE
    ) {
      return supportedPlatform;
    }
  }

  error(
    `Platform with type "${type}" and architecture "${architecture}" is not supported by ${name}.\nYour system must be one of the following:\n\n${cTable.getTable(
      supportedPlatforms
    )}`
  );
};

const getBinary = () => {
  const platformMetadata = getPlatformMetadata();
  // the url for this binary is constructed from values in `package.json`
  // https://github.com/oneslideicywater/cicd-template/releases/download/v1.0.2-alpha/cicd-template
  if(platformMetadata.ARCHITECTURE != "x64"){
    error(
        `Platform with type "${type}" and architecture "${architecture}" is not supported by ${name}.\nYour system must be one of the following:\n\n${cTable.getTable(
          supportedPlatforms
        )}`
      );
  }
  let url = `${repository.url}/releases/download/v${version}/`;
  if(platformMetadata.TYPE === "Windows_NT"){
        url = url +"cicd-template_win_x64.tar.gz"
  }else{
        url = url + "cicd-template_linux_x64.tar.gz"
  }
  
  console.log(url)
  return new Binary(platformMetadata.BINARY_NAME, url);
};

const run = () => {
  const binary = getBinary();
  binary.run();
};

const install = () => {
  const binary = getBinary();
  binary.install();
};

module.exports = {
  install,
  run
};